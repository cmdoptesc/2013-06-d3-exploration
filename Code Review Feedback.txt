Global variables! No. Use module pattern/namespace/etc.

Don't repeat jQuery selectors or $(this) -- cache them

Nice one for using $image for jQuery objects

If you ever populate HTML attributes or content using user provided stuff, you're gonna get hurt real bad
* Solution is Handlebars or other templating language

For $.get in jQuery, you can provide the root URL as url property, then provide query with data:

  $.get('http://webservices.nextbus.com/service/publicXMLFeed', {
    command: 'routeConfig',
    s: 'sf-muni'
  })

Let the templates handle printing stuff, let your JS just provide the data. Separation of duties.

You could encapsulate GET requests to the API with a helper method. i.e.

  getRouteInfo({ stopTag: 'cow' }, function(xml) {});

  function getRouteInfo(data, callback) {
    data = _.extend({}, defaultData, data);

    $.get(URL, data, 'xml');
  }

Build routeList object from array at runtime to avoid duplicating data.

Do initialization tasks all in one place -- not randomly in a file.

Don't forget doctype

Don't need type="text/javascript" in HTML5

Never need ending slashes on self closing tags in HTML5

More intuitive UI -- don't make changing selects modify the last added chart, seems a bit unintuitive. maybe one graph with all the times of the selected routes....

